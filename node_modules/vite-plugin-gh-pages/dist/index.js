"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ghPages = void 0;
const gh_pages_1 = __importDefault(require("gh-pages"));
const get_package_name_1 = require("./get-package-name");
const ghPages = (options) => {
    var _a, _b;
    let outDir = "";
    const onError = (_a = options === null || options === void 0 ? void 0 : options.onError) !== null && _a !== void 0 ? _a : ((error) => console.log(error));
    const onPublish = (_b = options === null || options === void 0 ? void 0 : options.onPublish) !== null && _b !== void 0 ? _b : (({ outDir, branch }) => {
        console.log(`ðŸŽ‰ Published \`${outDir}\` to branch \`${branch}\`.`);
    });
    return {
        name: "vite:gh-pages",
        apply: "build",
        enforce: "post",
        config(config) {
            if (config.base === undefined) {
                config.base = "/" + (0, get_package_name_1.getPackageName)() + "/";
            }
        },
        configResolved(resolvedConfig) {
            outDir = resolvedConfig.build.outDir;
        },
        closeBundle() {
            return __awaiter(this, void 0, void 0, function* () {
                var _a;
                const gpOptions = Object.assign({ dotfiles: true, branch: "gh-pages", nojekyll: true }, options);
                (_a = options === null || options === void 0 ? void 0 : options.onBeforePublish) === null || _a === void 0 ? void 0 : _a.call(options, Object.assign(Object.assign({}, gpOptions), { outDir }));
                yield gh_pages_1.default.publish(outDir, gpOptions, (error) => {
                    if (error)
                        return onError(error);
                    onPublish(Object.assign(Object.assign({}, gpOptions), { outDir }));
                });
            });
        },
    };
};
exports.ghPages = ghPages;
